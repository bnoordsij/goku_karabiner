{

    ;; simlayers are basically "hyper" keys
    ;; layers works too, but only recommended for non-typing keys like . or tab
    ;; to use more regular typing keys, use simlayers
    :simlayers {
       :k-mode   {:key :k}
       :o-mode   {:key :o}
       :opt-mode {:key :left_option} ; can't use O
    } ;; simlayers

    :applications {
        :terminals  [ "^com\\.apple\\.Terminal$",
                      "^com\\.googlecode\\.iterm2$"]
    }

    ;; main contains multiple manipulators
    :main [
        {:des "opt-mode: quick open"
            :rules [:opt-mode
;               [:1 ["open /System/Library/CoreServices/Finder.app"] ]
               [:1 ["open /Applications/ForkLift.app"] ]
               [:2 ["open /Applications/firefox.app"] ]
               [:3 ["open /System/Applications/notes.app"] ]
               [:4 ["open /Applications/iterm.app"] ]
               [:5 ["open /Applications/phpstorm.app"] ]
               [:6 ["open /System/Applications/TextEdit.app"] ]
               [:0 ["open '/Applications/Google Chrome.app'"] ]
            ]
        }
        {:des "o mode: quick open"
            :rules [:o-mode
               [:i ["open /Applications/iterm.app"] ]
               [:f ["open /Applications/firefox.app"] ]
               [:u ["open /Applications/firefox.app"] ]
               [:a ["open /Applications/Asana.app"] ]
               [:c ["open /Applications/rocket.Chat.app"] ]
               [:p ["open /Applications/phpstorm.app"] ]
               [:n ["open /System/Applications/notes.app"] ]
               [:m ["open '/Applications/Microsoft Outlook.app'"] ]
               ;; [:m ["open /System/Applications/mail.app"] ]
               ;; [:d ["open '/Applications/sequel pro.app'"] ]   ; opens a new app instance
               [:s ["open '/System/Applications/system preferences.app'"] ]
               [:comma ["open '/System/Applications/system preferences.app'"] ]
            ]
        }

        {:des "delete sequences"
            :rules [
               ;; delete word
               [:w :!Tw                    [:k-mode :terminals]]
               [:w :!Odelete_or_backspace  [:k-mode :!terminals]]

               ;; backspace
               ; [:j :delete_or_backspace    :k-mode]

               ;; delete line
               [:n :!Tu                    [:k-mode :terminals]]
               [:n :!Odelete_or_backspace  [:k-mode :!terminals]]

               ;; delete character
               [:x :delete_forward         :k-mode]
               [:u :!Cdelete_forward       :k-mode]
            ]
        }

        {:des "Confirm destructive actions like quit/close twice"
            :rules [
                ;; "Quit application by pressing command-q twice"
                ;; as taken from https://github.com/yqrashawn/GokuRakuJoudo/blob/a77cccb8e8d4e6a9fb8ef2e6bcfe49a4299e4cb2/examples.org
                [
                    ;; <from> second cmd-q (when variable "command-q" is 1)
                    :!C#Pq

                    ;; <to>, 3 to action
                    ;; 1. call cmd-q
                    ;; 2. set variable "command-q" to 0
                    ;; 3. cleanup the :cmdq notification (omit the third item to cleanup notification)
                    [:!Cq ["command-q" 0] [:noti :cmdq]]

                    ;; <condition> when variable "command-q" is 1
                    ["command-q" 1]
                ]
                [
                   ;; <from> first
                   ;;    cmd-q (when variable "command-q" is 0 which is default)
                   ;;    #P account for the case where caps-lock might be on.
                   :!C#Pq

                   ;; <to>, 2 to action
                   ;; 1. show notification with :id :cmdq, :text "Press Again to QUIT"
                   ;; 2. set variable "command-q" to 1 (for the second press)
                   [[:noti :cmdq "Press Again to QUIT"] ["command-q" 1]]

                   ;; <condition> nil means no required condition
                   nil

                   ;; <additional-option>
                   {
                    ;; to_delayed_action documentation
                    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to-delayed-action/
                        :delayed {
                            ;; run 2 actions when no other key presses after basic.to_delayed_action_delay_milliseconds
                            ;; 1. set variable "command-q" to 0
                            ;; 2. cleanup notification :id :cmdq
                            :invoked  [["command-q" 0] [:noti :cmdq]]

                            ;; run 2 actions when another key presses within basic.to_delayed_action_delay_milliseconds
                            ;; 1. set variable "command-q" to 0
                            ;; 2. cleanup notification :id :cmdq
                            :canceled [["command-q" 0] [:noti :cmdq]]
                        }
                    }
                ]
            ]
        }

    ] ;; main list
}
